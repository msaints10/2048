(require racket/tcp)
(require graphics/graphics)
(open-graphics)
(define menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
(((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
;;se define variable global para el juego online
(define base_online 0)
;;se define variable global para guardar el modo a jugar
(define modo_juego 0)

;;procedimiento que verifica los marcadores, conecta a los clientes y envia la base a jugar en el modo online
(define (online_mode_2048 baseseleccionada)
  
  (define listener (tcp-listen 1150))
  (define-values (in out) (tcp-accept listener))
  ((draw-solid-rectangle menu_2048) (make-posn 100  607) 500 18  "green")
  ((draw-string menu_2048) (make-posn 200 620) "El jugador uno se ha conectado correctamente..." "black")
  
  (define servidor2 (tcp-listen 1155)) 
  (define-values (entrada2 salida2) (tcp-accept servidor2))
  ((draw-solid-rectangle menu_2048) (make-posn 100  637) 500 18  "green")
  ((draw-string menu_2048) (make-posn 200 650) "El jugador dos se ha conectado correctamente..." "black")

  (close-graphics)
  (open-graphics)
  (set! menu_2048 (open-viewport "2048 - Dragon Blood - Modo online 1 vs 1" 1000 700))
  (((draw-pixmap-posn "Marcador_2048.jpg") menu_2048) (make-posn 0 0) "white")


  ;;pongo a escuchar a lo que me manden los clientes
  (define (escuchar_jugador2)
    (let ciclo_1
      ()
      (define msg (read in))
      (cond
        ((equal? (substring msg 0 2) "1-")  ;; 1- nos indicara el maximo del jugador contrincante
         (begin            
           (write (string-append "1-" (substring msg 2 (string-length msg))) salida2)
           (flush-output salida2)
           ((draw-solid-rectangle menu_2048) (make-posn 760  425) 100 20  "white")
           ((draw-string menu_2048) (make-posn 760 435) (substring msg 2 (string-length msg)) "black")
           (ciclo_1)
           )
         )
        ((equal? (substring msg 0 2) "2-")  ;; 2- nos indicara el numero de movimientos realizados por el contrincante
         (begin            
           (write (string-append "2-" (substring msg 2 (string-length msg))) salida2)
           (flush-output salida2)
           ((draw-solid-rectangle menu_2048) (make-posn 760  375) 100 20  "white")
           ((draw-string menu_2048) (make-posn 760 385) (substring msg 2 (string-length msg)) "black")
           (ciclo_1)
           )
         )
        ((equal? (substring msg 0 2) "3-")  ;; 3- nos indicara las casillas vacias del contrincante
         (begin            
           (write (string-append "3-" (substring msg 2 (string-length msg))) salida2)
           (flush-output salida2)
           ((draw-solid-rectangle menu_2048) (make-posn 760  324) 100 20  "white")
           ((draw-string menu_2048) (make-posn 760 335) (substring msg 2 (string-length msg)) "black")
           (ciclo_1)
           )
         )
        ((equal? (substring msg 0 2) "4-")  ;; 4- nos dira el el movimiento elegido por el adversario
         (begin            
           (write (string-append "4-" (substring msg 2 (string-length msg))) salida2)
           (flush-output salida2)
           ((draw-solid-rectangle menu_2048) (make-posn 760  264) 100 20  "white")
           ((draw-string menu_2048) (make-posn 760 275) (substring msg 2 (string-length msg)) "black")
           (ciclo_1)
           )
         )
        (else
         (begin
           (ciclo_1)
           )
         )
        )
      )
    )

  (define tarea-paralela1 (thread escuchar_jugador2))
  
  (define (escuchar_jugador1)
    (let ciclo2
      ()
      (define msg2 (read entrada2))
      (cond
        ((equal? (substring msg2 0 2) "1-") ;; 1- nos indicara el maximo del jugador contrincante
         (begin
           (write (string-append "1-" (substring msg2 2 (string-length msg2))) out)
           (flush-output out)
           ((draw-solid-rectangle menu_2048) (make-posn 290  425) 100 20  "white")
           ((draw-string menu_2048) (make-posn 290 435) (substring msg2 2 (string-length msg2)) "black")
           (ciclo2)
           ))
        ((equal? (substring msg2 0 2) "2-") ;; 2- nos indicara el numero de movimientos realizados por el contrincante
         (begin
           (write (string-append "2-" (substring msg2 2 (string-length msg2))) out)
           (flush-output out)
           ((draw-solid-rectangle menu_2048) (make-posn 290  375) 100 20  "white")
           ((draw-string menu_2048) (make-posn 290 385) (substring msg2 2 (string-length msg2)) "black")
           (ciclo2)
           ))
        ((equal? (substring msg2 0 2) "3-") ;; 3- nos indicara las casillas vacias del contrincante
         (begin
           (write (string-append "3-" (substring msg2 2 (string-length msg2))) out)
           (flush-output out)
           ((draw-solid-rectangle menu_2048) (make-posn 290  324) 100 20  "white")
           ((draw-string menu_2048) (make-posn 290 335) (substring msg2 2 (string-length msg2)) "black")
           (ciclo2)
           ))
        ((equal? (substring msg2 0 2) "4-") ;; 4- nos indicara el movimiento elegido por el contrincante
         (begin
           (write (string-append "4-" (substring msg2 2 (string-length msg2))) out)
           (flush-output out)
           ((draw-solid-rectangle menu_2048) (make-posn 290  264) 100 20  "white")
           ((draw-string menu_2048) (make-posn 290 275) (substring msg2 2 (string-length msg2)) "black")
           (ciclo2)
           ))
        (else (begin
                (ciclo2)
                ))
        )
      )
    )

  (define tarea-paralela2 (thread escuchar_jugador1))

  ;;envio la base seleccionada a los clientes
  (write (number->string baseseleccionada) out)
  (flush-output out)
  (write (number->string baseseleccionada) salida2)
  (flush-output salida2)

  #t    
  )
  
;;Procedimiento que llama al single player del servidor
(define (single_player_2048 base_user)
  (open-graphics)
  (define pool 0)
  ;Base que va a ser recibida por el usuario
  (define Base base_user)

  ;Definicion de variables maximas
  (define maximo1 0)
  (define maximo2 0)
  (define maximo3 0)
  (define maximo4 0)
  (define maximo 0)
  ;Se crea el plano con un vector de vectores creado una matriz de 4 x 4
  (define col (make-vector 4))
  (vector-set! col 0 (make-vector 4 0))
  (vector-set! col 1 (make-vector 4 0))
  (vector-set! col 2 (make-vector 4 0))
  (vector-set! col 3 (make-vector 4 0))
  (define plano (open-viewport "2048 - Blood Dragon" 1000 700))
  (((draw-pixmap-posn "fondo_2048.jpg") plano) (make-posn 0 0) "white")

  ;;variable contadora de movimientos
  (define vcontador_movimientos 0)

  ;Retorna la pocision en la que se colocará el número
  (define (numero-posicion posicion)
    (define retorno 0)
    (cond
      [(= posicion 0) (set! retorno 115)]
      [(= posicion 1) (set! retorno 267)]
      [(= posicion 2) (set! retorno 425)]
      [(= posicion 3) (set! retorno 570)]
      )
    retorno
    )

  ;Retorna la pocision en la cual se dibujará la fila
  (define (reglamento-dibujo fila)
    (define fila0 50)
    (define fila1 200)
    (define fila2 350)
    (define fila3 500)
    (define retorno 0)
    (cond
      [(= fila 0)(set! retorno fila0)]
      [(= fila 1)(set! retorno fila1)]
      [(= fila 2)(set! retorno fila2)]
      [(= fila 3)(set! retorno fila3)]
      )
    retorno
    )

  ;Dibuja el tablero del juego
  (define (grafico)
    (((draw-pixmap-posn "fondo_2048.jpg") plano) (make-posn 0 0) "white")
    ((draw-solid-rectangle plano ) (make-posn 50 50) 600 600 "White")
    ((draw-rectangle plano ) (make-posn 50 50) 600 600 "black")
    (do ((contfila 0 (+ contfila 1)))
      ((= contfila 4))
      (do ((contcolumna 0 (+ contcolumna 1)))
        ((= contcolumna 4))
        (set! pool (reglamento-dibujo contcolumna))
        (cond
          [(= contfila 0)((draw-rectangle plano ) (make-posn pool 50) 150 150 "black")]
          [(= contfila 1)((draw-rectangle plano ) (make-posn pool  200) 150 150 "black")]
          [(= contfila 2)((draw-rectangle plano ) (make-posn pool  350) 150 150 "black")]
          [(= contfila 3)((draw-rectangle plano ) (make-posn pool  500) 150 150 "black")]
          )
        )
      )    
    )
  (grafico)

  ;Muestra la tabla del juego por cada movimiento en consola
  (define (console-plano)
    (define contador 0)
    (define (ciclo)
      (if (not (= (vector-length col) contador))
          (begin
            (display (vector-ref col contador))(newline)
            (newline)
            (set! contador (+ contador 1))         
            (ciclo))
          )
      )
    (ciclo)
    ((draw-solid-rectangle plano) (make-posn 840  200) 100 20  "white")
    ((draw-string plano) (make-posn 840 215) (number->string (buscarMaximo)) "black")
    )

  ;hace efectivo el contador de movimientos
  (define (contador_movimientos)
    (set! vcontador_movimientos (+ vcontador_movimientos 1))
    ((draw-solid-rectangle plano) (make-posn 840  166) 100 20  "white")
    ((draw-string plano) (make-posn 840 181) (number->string vcontador_movimientos) "black")
    )

  ;;verifica las casillas vacias del plano
  (define (verifica_vacias)
    (define celda 0)
    (define aux 0)
    (do ((contfila 0 (+ contfila 1)))
      ((= contfila 4))
      (do ((contcolumna 0 (+ contcolumna 1)))
        ((= contcolumna 4) ())
        (set! celda (vector-ref (vector-ref col contfila) contcolumna))
        (if (= celda 0)
            (begin
              (set! aux (+ aux 1))
              )
            )            
        )
      )
    ((draw-solid-rectangle plano) (make-posn 840  134) 100 20  "white")
    ((draw-string plano) (make-posn 840 147) (number->string aux) "black")
    )

  ;;verifica el tiro realizado con el teclado o flechas
  (define (verifica_tiro opcion)
    (cond
      [(= opcion 1)
       (begin
         ((draw-solid-rectangle plano) (make-posn 840 103) 100 20  "white")
         ((draw-string plano) (make-posn 840 117) "Izquierda" "black")
         )]
      [(= opcion 2)
       (begin
         ((draw-solid-rectangle plano) (make-posn 840 103) 100 20  "white")
         ((draw-string plano) (make-posn 840 117) "Derecha" "black")
         )]
      [(= opcion 3)
       (begin
         ((draw-solid-rectangle plano) (make-posn 840 103) 100 20  "white")
         ((draw-string plano) (make-posn 840 117) "Abajo" "black")
         )]
      [(= opcion 4)
       (begin
         ((draw-solid-rectangle plano) (make-posn 840 103) 100 20  "white")
         ((draw-string plano) (make-posn 840 117) "Arriba" "black")
         )]
      )
    )
  
  ; devuelve el maximo de todas las filas // para eso utilizo el "buscarMaximoF"
  (define (buscarMaximo)
    (define valor1 (buscarMaximoF 0))
    (define valor2 (buscarMaximoF 1))
    (define valor3 (buscarMaximoF 2))
    (define valor4 (buscarMaximoF 3))
    (define nada 0)
    (if (integer? valor1) (begin (set! nada 1) ) (begin
                                                   (set! valor1 0)
                                                   ))
    (if (integer? valor2) (begin (set! nada 1)) (begin
                                                  (set! valor2 0)
                                                  ))
    (if (integer? valor3) (begin (set! nada 1)) (begin
                                                  (set! valor3 0)
                                                  ))
    (if (integer? valor4) (begin (set! nada 1)) (begin
                                                  (set! valor4 0)
                                                  ))
    (cond
      [(and (>= valor1 valor2)(>= valor1 valor3)(>= valor1 valor4)) (begin
                                                                      valor1)]
      [(and (>= valor2 valor1)(>= valor2 valor3)(>= valor2 valor4)) (begin
                                                                      valor2)]
      [(and (>= valor3 valor1)(>= valor3 valor2)(>= valor3 valor4)) (begin
                                                                      valor3)]
      [(and (>= valor4 valor1)(>= valor4 valor2)(>= valor4 valor3)) (begin
                                                                      valor4)]
      )
    )
  ; devuelve el maximo pero de cada fila del vector
  (define (buscarMaximoF fila)
    (define contador 0)
    (define contadorAux 0)
    (define valor1 0)
    (define valor2 0)
    (define valor3 0)
    (define valor4 0)
    (if (< contador 5)
        (begin
          (set! valor1 (vector-ref (vector-ref col fila) 0))
          (set! valor2 (vector-ref (vector-ref col fila) 1))
          (set! valor3 (vector-ref (vector-ref col fila) 2))
          (set! valor4 (vector-ref (vector-ref col fila) 3))
          (cond
            [(and (>= valor1 valor2)(>= valor1 valor3)(>= valor1 valor4)) (begin
                                                                            valor1)]
            [(and (>= valor2 valor1)(>= valor2 valor3)(>= valor2 valor4)) (begin
                                                                            valor2)]
            [(and (>= valor3 valor1)(>= valor3 valor2)(>= valor3 valor4)) (begin
                                                                            valor3)]
            [(and (>= valor4 valor1)(>= valor4 valor2)(>= valor4 valor3)) (begin
                                                                            valor4)]
            )
          )
        )
    )

    (define (tablero-lleno?)
    (define celda 0)
    (define aux 0)
    (do ((contfila 0 (+ contfila 1)))
      ((= contfila 4))
      (do ((contcolumna 0 (+ contcolumna 1)))
        ((= contcolumna 4) ())
        (set! celda (vector-ref (vector-ref col contfila) contcolumna))
        (if (= celda 0)
            (begin
              (set! aux (+ aux 1))
              )
            )
        )
      )
    (if (= aux 0)
        (begin
          (set! aux (verificacion-final))))
    aux
    )

  ;Busca si en el tablero hay un ultimo movimiento cuando este se encuentra lleno
  (define (verificacion-final)
    (define actual 0)
    (define anterior-fila 0)
    (define anterior-columna 0)
    (define finalfantasy 0)
    (do ((contfila 0 (+ contfila 1)))
      ((= contfila 4))
      (do ((contcolumna 0 (+ contcolumna 1)))
        ((= contcolumna 4) ())
        (set! actual (vector-ref (vector-ref col contfila) contcolumna))
        (if (< contcolumna 3)
            (begin
              (set! anterior-columna (vector-ref (vector-ref col contfila) (+ contcolumna 1)))
              (if (= anterior-columna actual)
                  (begin
                    (set! finalfantasy 1))
                  ))
            )
        (if (not (= finalfantasy 1))
            (begin
              (if (> contcolumna 0)
                  (begin
                    (set! anterior-columna (vector-ref (vector-ref col contfila) (- contcolumna 1)))
                    (if (= anterior-columna actual)
                        (begin
                          (set! finalfantasy 1))
                        ))))
            )
        (if (not (= finalfantasy 1))
            (begin
              (if (< contfila 3)
                  (begin
                    (set! anterior-fila (vector-ref (vector-ref col (+ contfila 1)) contcolumna))
                    (if (= anterior-fila actual)
                        (begin
                          (set! finalfantasy 1))
                        ))))
            )
        (if (not (= finalfantasy 1))
            (begin
              (if (> contfila 0)
                  (begin
                    (set! anterior-fila (vector-ref (vector-ref col (- contfila 1)) contcolumna))
                    (if (= anterior-fila actual)
                        (begin
                          (set! finalfantasy 1))
                        ))))
            )
        )
      )
    finalfantasy
    )


  (define (inteligencia)
    (define actual 0)
    (define anterior-fila 0)
    (define anterior-columna 0)
    (define destino -1)
    (do ((contfila 0 (+ contfila 1)))
      ((= contfila 4))
      (do ((contcolumna 0 (+ contcolumna 1)))
        ((= contcolumna 4) ())
        (set! actual (vector-ref (vector-ref col contfila) contcolumna))
        (if (not (= actual 0))
            (begin
              (if (< contcolumna 3)
                  (begin
                    (set! anterior-columna (vector-ref (vector-ref col contfila) (+ contcolumna 1)))
                    (if (= anterior-columna actual)
                        (begin
                          (set! destino 1))
                        ))
                  )
              (if (= destino -1)
                  (begin
                    (if (> contcolumna 0)
                        (begin
                          (set! anterior-columna (vector-ref (vector-ref col contfila) (- contcolumna 1)))
                          (if (= anterior-columna actual)
                              (begin
                                (set! destino 0))
                              ))))
                  )
              (if (= destino -1)
                  (begin
                    (if (< contfila 3)
                        (begin
                          (set! anterior-fila (vector-ref (vector-ref col (+ contfila 1)) contcolumna))
                          (if (= anterior-fila actual)
                              (begin
                                (set! destino 3))
                              ))))
                  )
              (if (= destino -1)
                  (begin
                    (if (> contfila 0)
                        (begin
                          (set! anterior-fila (vector-ref (vector-ref col (- contfila 1)) contcolumna))
                          (if (= anterior-fila actual)
                              (begin
                                (set! destino 2))
                              ))))
                  ))
            )
        )
      )
    (if(= destino -1)
       (begin
         (set! destino (random 4)))
       )
    destino
    )

  ;Construye un par con valores de "x","y" aleatorios y devuelve una posicion 
  (define (posicion_retorno)
    (define x (random 4))
    (define y (random 4))
    (define pos (cons x y))
    (newline)(display pos)(newline)
    pos
    )

  ;Regresa el valor aleatorio cada que el jugador haga un movimiento.
  (define (dar-valor)
    (define aux (random Base))
    (define numero 0)
    (define pos (posicion_retorno))
    (if (= aux 0)
        (set! numero Base)
        (set! numero (* Base 2))
        )
    (define vacio (vector-ref (vector-ref col (car pos)) (cdr pos)))
    (if (= vacio 0)
        (begin
          (vector-set! (vector-ref col (car pos)) (cdr pos) numero)
          ((draw-string plano) (make-posn (numero-posicion (cdr pos)) (numero-posicion (car pos))) (number->string numero) "black")
          (verifica_vacias)
          )
        (begin
          (do ((cont 2 (+ cont 1)))
            ((or (<= cont 1) (= cont 20)))
            (set! pos (posicion_retorno))
            (set! vacio (vector-ref (vector-ref col (car pos)) (cdr pos)))
            (if (= vacio 0)
                (begin
                  (vector-set! (vector-ref col (car pos)) (cdr pos) numero)
                  ((draw-string plano) (make-posn (numero-posicion (cdr pos)) (numero-posicion (car pos))) (number->string numero) "black")
                  (verifica_vacias)
                  (set! cont 0)
                  )
                )
            )
          )
        )
    )

  ;Primeros valores
  (define (principio)    
    (do((contador 0 (+ contador 1)))
      ((= contador 2))
      (dar-valor)
      )    
    ((draw-solid-rectangle plano) (make-posn 840  200) 100 20  "white")
    ((draw-string plano) (make-posn 840 215) (number->string (buscarMaximo)) "black")
    ((draw-solid-rectangle plano) (make-posn 840  166) 100 20  "white")
    ((draw-string plano) (make-posn 840 181) (number->string 0) "black")
    (verifica_vacias)
    ((draw-string plano) (make-posn 855 240) (number->string Base) "red")
    )

  ; Procedimiento que mueve los numeros dependiendo del movimiento
  (define (movimiento accion)
    (define actual 0)
    (define anterior 0)
    (define indice 0)
    (if (= accion 0)
        (begin
          (do ((contfila 0 (+ contfila 1)))
            ((= contfila 4))
            (do ((contcolumna 0 (+ contcolumna 1)))
              ((= contcolumna 4))      
              (set! actual (vector-ref (vector-ref col contfila) contcolumna))
              (if (not(= actual 0))           
                  (begin
                    (set! indice (do ((cont 0 (+ cont 1)))
                                   ((or (= cont 4)(= (vector-ref (vector-ref col contfila) cont) 0)) cont)                 
                                   ))
                    (if (> contcolumna indice)
                        (begin
                          (vector-set! (vector-ref col contfila) indice actual)                
                          ((draw-string plano) (make-posn (numero-posicion indice) (numero-posicion contfila)) (number->string actual) "black")
                          )
                        )            
                    (if (and (not(= contcolumna 0)) (> contcolumna indice))
                        (begin
                          (vector-set! (vector-ref col contfila) contcolumna 0)
                          ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                          )
                        )
                    )
                  )
              )
            )
          (dar-valor)
          (console-plano)
          (set! actual 0)
          (set! anterior 0)
          (set! indice 0))
        )
    (if (= accion 1)
        (begin
          (do ((contfila 3 (- contfila 1)))
            ((= contfila -1))
            (do ((contcolumna 3 (- contcolumna 1)))
              ((= contcolumna -1))      
              (set! actual (vector-ref (vector-ref col contfila) contcolumna))
              (if (not(= actual 0))          
                  (begin
                    (set! indice (do ((cont 3 (- cont 1)))
                                   ((or (= cont -1)(= (vector-ref (vector-ref col contfila) cont) 0)) cont)                 
                                   ))
                    (if (< contcolumna indice)
                        (begin
                          (vector-set! (vector-ref col contfila) indice actual)
                          ((draw-string plano) (make-posn (numero-posicion indice) (numero-posicion contfila)) (number->string actual) "black")
                          )
                        )            
                    (if (and (not(= contcolumna 3)) (< contcolumna indice))
                        (begin
                          (vector-set! (vector-ref col contfila) contcolumna 0)
                          ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                          )
                        )
                    )
                  )
              )
            )
          (dar-valor)
          (console-plano)
          (set! actual 0)
          (set! anterior 0)
          (set! indice 0))
        )
    (if (= accion 2)
        (begin
          (do ((contcolumna 0 (+ contcolumna 1)))
            ((= contcolumna 4))
            (do ((contfila 0 (+ contfila 1)))
              ((= contfila 4))      
              (set! actual (vector-ref (vector-ref col contfila) contcolumna))
              (if (not(= actual 0))          
                  (begin
                    (set! indice (do ((cont 0 (+ cont 1)))
                                   ((or (= cont 4)(= (vector-ref (vector-ref col cont) contcolumna) 0)) cont)                 
                                   ))
                    (if (> contfila indice)
                        (begin
                          (vector-set! (vector-ref col indice) contcolumna actual)
                          ((draw-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion indice)) (number->string actual) "black")
                          )
                        )            
                    (if (and (not(= contfila 0)) (> contfila indice))
                        (begin
                          (vector-set! (vector-ref col contfila) contcolumna 0)
                          ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                          )
                        )
                    )
                  )
              )
            )
          (dar-valor)
          (console-plano)
          (set! actual 0)
          (set! anterior 0)
          (set! indice 0))
        )
    (if (= accion 3)
        (begin
          (do ((contcolumna 3 (- contcolumna 1)))
            ((= contcolumna -1))
            (do ((contfila 3 (- contfila 1)))
              ((= contfila -1))      
              (set! actual (vector-ref (vector-ref col contfila) contcolumna))
              (if (not(= actual 0))          
                  (begin
                    (set! indice (do ((cont 3 (- cont 1)))
                                   ((or (= cont -1) (= (vector-ref (vector-ref col cont) contcolumna) 0)) cont)                 
                                   ))
                    (if (< contfila indice)
                        (begin                  
                          (vector-set! (vector-ref col indice) contcolumna actual)
                          ((draw-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion indice)) (number->string actual) "black")
                          )
                        )            
                    (if (and (not(= contfila 3)) (< contfila indice))
                        (begin
                          (vector-set! (vector-ref col contfila) contcolumna 0)
                          ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                          )
                        )
                    )
                  )
              )
            )
          (dar-valor)
          (console-plano)
          (set! actual 0)
          (set! anterior 0)
          (set! indice 0))
        )
    )

  ;Suma los valores a la izquierda
  (define (suma-izquierda)
    (define actual 0)
    (define siguiente 0)
    (define indice 0)
    (do ((contfila 0 (+ contfila 1)))
      ((= contfila 4))
      (do ((contcolumna 0 (+ contcolumna 1)))
        ((= contcolumna 4))      
        (set! actual (vector-ref (vector-ref col contfila) contcolumna))
        (if (and (not(= actual 0)) (< contcolumna 3))
            (begin
              (set! siguiente (vector-ref (vector-ref col contfila) (+ contcolumna 1)))
              (if (= actual siguiente)
                  (begin (vector-set! (vector-ref col contfila) contcolumna (+ actual siguiente))
                         ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                         ((draw-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string (+ actual siguiente)) "black")
                         (verifica_vacias)
                         (if (< contcolumna 3)
                             (begin (vector-set! (vector-ref col contfila) (+ contcolumna 1) 0)
                                    ((clear-string plano) (make-posn (numero-posicion (+ contcolumna 1)) (numero-posicion contfila)) (number->string siguiente))
                                    )
                             )
                         )
                  )
              )
            )      
        )
      )
    (movimiento 0)
    )

  ;Suma los numeros a la derecha
  (define (suma-derecha)
    (define actual 0)
    (define siguiente 0)
    (define indice 0)
    (do ((contfila 3 (- contfila 1)))
      ((= contfila -1))
      (do ((contcolumna 3 (- contcolumna 1)))
        ((= contcolumna -1))      
        (set! actual (vector-ref (vector-ref col contfila) contcolumna))
        (if (and (not(= actual 0)) (> contcolumna 0))
            (begin          
              (set! siguiente (vector-ref (vector-ref col contfila) (- contcolumna 1)))
              (if (= actual siguiente)
                  (begin (vector-set! (vector-ref col contfila) contcolumna (+ actual siguiente))
                         ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                         ((draw-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string (+ actual siguiente)) "black")
                         (verifica_vacias)
                         (if (> contcolumna 0)
                             (begin
                               (vector-set! (vector-ref col contfila) (- contcolumna 1) 0)
                               ((clear-string plano) (make-posn (numero-posicion (- contcolumna 1)) (numero-posicion contfila)) (number->string siguiente))
                               )
                             )
                         )
                  )
              )
            )      
        )
      )
    (movimiento 1)
    )

  ;Suma los numeros hacia arriba
  (define (suma-arriba)
    (define actual 0)
    (define siguiente 0)
    (define indice 0)
    (do ((contcolumna 0 (+ contcolumna 1)))
      ((= contcolumna 4))
      (do ((contfila 0 (+ contfila 1)))
        ((= contfila 4))      
        (set! actual (vector-ref (vector-ref col contfila) contcolumna))
        (if (and (not(= actual 0)) (< contfila 3))
            (begin
              (set! siguiente (vector-ref (vector-ref col (+ contfila 1)) contcolumna))
              (if (= actual siguiente)
                  (begin (vector-set! (vector-ref col contfila) contcolumna (+ actual siguiente))
                         ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                         ((draw-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string (+ actual siguiente)) "black")
                         (verifica_vacias)
                         (if (< contfila 3)
                             (begin
                               (vector-set! (vector-ref col (+ contfila 1)) contcolumna 0)
                               ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion (+ contfila 1))) (number->string siguiente))
                               )
                             )
                         )
                  )
              )
            )      
        )
      )
    (movimiento 2)
    )

  ;Suma los numeros hacia abajo
  (define (suma-abajo)
    (define actual 0)
    (define siguiente 0)
    (define indice 0)
    (do ((contcolumna 3 (- contcolumna 1)))
      ((= contcolumna -1))
      (do ((contfila 3 (- contfila 1)))
        ((= contfila -1))      
        (set! actual (vector-ref (vector-ref col contfila) contcolumna))
        (if (and (not(= actual 0)) (> contfila 0))
            (begin          
              (set! siguiente (vector-ref (vector-ref col (- contfila 1)) contcolumna))
              (if (= actual siguiente)
                  (begin (vector-set! (vector-ref col contfila) contcolumna (+ actual siguiente))
                         ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string actual))
                         ((draw-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion contfila)) (number->string (+ actual siguiente)) "black")
                         (verifica_vacias)
                         (if (> contfila 0)
                             (begin
                               (vector-set! (vector-ref col (- contfila 1 )) contcolumna 0)
                               ((clear-string plano) (make-posn (numero-posicion contcolumna) (numero-posicion (- contfila 1))) (number->string siguiente))
                               )
                             )
                         )
                  )
              )
            )      
        )
      )
    (movimiento 3)
    )

  ;Ejecuta el procedimiento de suma correspondiente dependiendo de la acción del teclado sin enter
  (define (evento-teclado)
    (define key "")
    (define lleno 0)
    (define ganador 0)
    (do ((cont 2 (+ cont 1)))
      ((<= cont 1))
      (set! key (get-key-press plano))
      (set! lleno (tablero-lleno?))    
      (if (> lleno 0)
          (begin
            (cond
              [(or (equal? (key-value key) 'left)(equal? (key-value key) #\a)) (begin (contador_movimientos) (verifica_tiro 1) (suma-izquierda))]
              [(or (equal? (key-value key) 'right)(equal? (key-value key) #\d)) (begin (contador_movimientos) (verifica_tiro 2) (suma-derecha))]
              [(or (equal? (key-value key) 'down)(equal? (key-value key) #\s)) (begin (contador_movimientos) (verifica_tiro 3) (suma-abajo))]
              [(or (equal? (key-value key) 'up)(equal? (key-value key) #\w )) (begin (contador_movimientos) (verifica_tiro 4) (suma-arriba))])
            )
          (begin
            (((draw-pixmap-posn "endgame.jpg") plano) (make-posn 50 125))
            (kill-thread thread_verifica_rendicion)
            (let ciclo_menu_regresa
              ()
              (define opcionmenu (get-mouse-click plano))
              (define x (posn-x (mouse-click-posn opcionmenu)))
              (define y (posn-y (mouse-click-posn opcionmenu)))
              (cond
                ((and (< 227 x 475) (< 507 y 552))
                 (begin
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (menu_principal)
                   (kill-thread tarea-paralela)
                   )
                 )
                (else
                 (ciclo_menu_regresa)
                 )
                )
              )
            )
          )
      )
    )

  ;Obtiene el movimiento y realiza la pausa para esperar y obtener el enter
  (define (privon key keyobs)
    (if (or (equal? (key-value key) 'left)(equal? (key-value key) #\a))
        (begin
          (get-key-press plano)
          (set! keyobs (get-key-press plano))
          (if (equal? (key-value keyobs) #\return)
              (begin
                (contador_movimientos)
                (verifica_tiro 1)
                (suma-izquierda))
              (begin
                (set! key keyobs)
                (set! keyobs "")
                (privon key keyobs)))))
    (if (or (equal? (key-value key) 'right)(equal? (key-value key) #\d))
        (begin
          (get-key-press plano)
          (set! keyobs (get-key-press plano))
          (if (equal? (key-value keyobs) #\return)
              (begin
                (contador_movimientos)
                (verifica_tiro 2)
                (suma-derecha))
              (begin
                (set! key keyobs)
                (set! keyobs "")
                (privon key keyobs)))))
    (if (or (equal? (key-value key) 'down)(equal? (key-value key) #\s))
        (begin
          (get-key-press plano)
          (set! keyobs (get-key-press plano))
          (if (equal? (key-value keyobs) #\return)
              (begin
                (contador_movimientos)
                (verifica_tiro 3)
                (suma-abajo))
              (begin
                (set! key keyobs)
                (set! keyobs "")
                (privon key keyobs)))))
    (if (or (equal? (key-value key) 'up)(equal? (key-value key) #\w ))
        (begin
          (get-key-press plano)
          (set! keyobs (get-key-press plano))
          (if (equal? (key-value keyobs) #\return)
              (begin
                (contador_movimientos)
                (verifica_tiro 4)
                (suma-arriba))
              (begin
                (set! key keyobs)
                (set! keyobs "")
                (privon key keyobs)))))
    )


;Ejecuta el procedimiento de suma correspondiente dependiendo de la acción del teclado con enter
  (define (evento-teclado1)
    (define key "")
    (define keyobs "")
    (define lleno 0)
    (define ganador 0)
    (do ((cont 2 (+ cont 1)))
      ((<= cont 1))
      (set! key (get-key-press plano))
      (set! lleno (tablero-lleno?))
      (if (> lleno 0)
          (begin
            (privon key keyobs)
            )
          (begin
            (((draw-pixmap-posn "endgame.jpg") plano) (make-posn 50 125))
            (kill-thread thread_verifica_rendicion)
            (let ciclo_menu_regresa
              ()
              (define opcionmenu (get-mouse-click plano))
              (define x (posn-x (mouse-click-posn opcionmenu)))
              (define y (posn-y (mouse-click-posn opcionmenu)))
              (cond
                ((and (< 227 x 475) (< 507 y 552))
                 (begin
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (menu_principal)
                   (kill-thread tarea-paralela)
                   )
                 )
                (else
                 (ciclo_menu_regresa)
                 )
                )
              )
            )
          )
      )
    )

  (define (verifica_rendicion)
    (let ciclo
      ()
      (define opcionmenu (get-mouse-click plano))
      (define x (posn-x (mouse-click-posn opcionmenu)))
      (define y (posn-y (mouse-click-posn opcionmenu)))
      (cond
        ((and (< 758 x 910) (< 271 y 307))
         (begin
           (kill-thread tarea-paralela)
           (((draw-pixmap-posn "endgame.jpg") plano) (make-posn 50 125))
           (let ciclo_menu_regresa
             ()
             (define opcionmenu (get-mouse-click plano))
             (define x (posn-x (mouse-click-posn opcionmenu)))
             (define y (posn-y (mouse-click-posn opcionmenu)))
             (cond
               ((and (< 227 x 475) (< 507 y 552))
                (begin
                  (close-graphics)
                  (open-graphics)
                  (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                  (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
                  (menu_principal)                  
                  (kill-thread thread_verifica_rendicion)
                  )
                )
               (else
                (ciclo_menu_regresa)
                )
               )
             )
           )
         )   
        (else
         (ciclo)          
         )
        )
      )
    )


  
  ;Se define tareas paralelas
  (define tarea-paralela  (thread evento-teclado1))
  (kill-thread tarea-paralela)
   (if (= modo_juego 1)
      (begin
        (set! tarea-paralela (thread evento-teclado1))
        )
      (begin
         (set! tarea-paralela (thread evento-teclado))
      )
      )
  (define thread_verifica_rendicion (thread verifica_rendicion))
  (principio)
  )

(define (menu_principal)
  (let ciclo
    ()
    (define opcionmenu (get-mouse-click menu_2048))
    (define x (posn-x (mouse-click-posn opcionmenu)))
    (define y (posn-y (mouse-click-posn opcionmenu)))
    (cond 
      ((and (< 329 x 663) (< 326 y 370))
       (begin
         (close-graphics)
         (open-graphics)
         (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
         (((draw-pixmap-posn "modo_juego_2048.jpg") menu_2048) (make-posn 0 0) "white")
         (let ciclo_modo_juego
           ()
           (define opcionmenu_integrantes (get-mouse-click menu_2048))
           (define x (posn-x (mouse-click-posn opcionmenu_integrantes)))
           (define y (posn-y (mouse-click-posn opcionmenu_integrantes)))
           (cond
             ((and (< 16 x 354) (< 236 y 549))              
              (close-graphics)
              (open-graphics)
              (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
              (((draw-pixmap-posn "base_2048.jpg") menu_2048) (make-posn 0 0) "white")
              (set! modo_juego 1)
              (let ciclo_singleplayer
                ()
                (define opcionmenu_integrantes (get-mouse-click menu_2048))
                (define x (posn-x (mouse-click-posn opcionmenu_integrantes)))
                (define y (posn-y (mouse-click-posn opcionmenu_integrantes)))
                (cond
                  ((and (< 10 x 170) (< 18 y 73))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (ciclo)
                   )
                  ((and (< 45 x 159) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 2)
                   )
                  ((and (< 199 x 313) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 3)
                   )
                  ((and (< 353 x 467) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 4)
                   )
                  ((and (< 507 x 622) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 5)
                   )
                  ((and (< 45 x 159) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 6)
                   )
                  ((and (< 199 x 313) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 7)
                   )
                  ((and (< 353 x 467) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 8)
                   )
                  ((and (< 507 x 622) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 9)
                   )
                  (else
                   (ciclo_singleplayer)
                   )
                  )
                )
              )
             ((and (< 355 x 682) (< 236 y 549))
              (close-graphics)
              (open-graphics)
              (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
              (((draw-pixmap-posn "base_2048.jpg") menu_2048) (make-posn 0 0) "white")
              (set! modo_juego 0)
              (let ciclo_singleplayer
                ()
                (define opcionmenu_integrantes (get-mouse-click menu_2048))
                (define x (posn-x (mouse-click-posn opcionmenu_integrantes)))
                (define y (posn-y (mouse-click-posn opcionmenu_integrantes)))
                (cond
                  ((and (< 10 x 170) (< 18 y 73))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (ciclo)
                   )
                  ((and (< 45 x 159) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 2)
                   )
                  ((and (< 199 x 313) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 3)
                   )
                  ((and (< 353 x 467) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 4)
                   )
                  ((and (< 507 x 622) (< 259 y 371))
                   (close-graphics)
                   (single_player_2048 5)
                   )
                  ((and (< 45 x 159) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 6)
                   )
                  ((and (< 199 x 313) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 7)
                   )
                  ((and (< 353 x 467) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 8)
                   )
                  ((and (< 507 x 622) (< 409 y 522))
                   (close-graphics)
                   (single_player_2048 9)
                   )
                  (else
                   (ciclo_singleplayer)
                   )
                  )
                )
              )
             ((and (< 15 x 236) (< 14 y 58))
              (close-graphics)
              (open-graphics)
              (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
              (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
              (ciclo)
              )
             (else
              (ciclo_modo_juego)
              )
             )
           )
         )
       )
      ((and (< 329 x 663) (< 390 y 437))
       (begin
         (close-graphics)
         (open-graphics)
         (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
         (((draw-pixmap-posn "modo_juego_2048.jpg") menu_2048) (make-posn 0 0) "white")
         (let ciclo_modo_juego
           ()
           (define opcionmenu_integrantes (get-mouse-click menu_2048))
           (define x (posn-x (mouse-click-posn opcionmenu_integrantes)))
           (define y (posn-y (mouse-click-posn opcionmenu_integrantes)))
           (cond
             ((and (< 16 x 354) (< 236 y 549))
              (close-graphics)
              (open-graphics)
              (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
              (((draw-pixmap-posn "base_2048.jpg") menu_2048) (make-posn 0 0) "white")
              (set! modo_juego 1)
              (let ciclo_baseonline
                ()
                (define opcionmenu_integrantes (get-mouse-click menu_2048))
                (define x (posn-x (mouse-click-posn opcionmenu_integrantes)))
                (define y (posn-y (mouse-click-posn opcionmenu_integrantes)))
                (cond
                  ((and (< 10 x 170) (< 18 y 73))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "modo_juego_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (ciclo_modo_juego)
                   )
                  ((and (< 45 x 159) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 2)
                   )
                  ((and (< 199 x 313) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 3)
                   )
                  ((and (< 353 x 467) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 4)
                   )
                  ((and (< 507 x 622) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 5)
                   )
                  ((and (< 45 x 159) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 5)
                   )
                  ((and (< 199 x 313) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 7)
                   )
                  ((and (< 353 x 467) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 8)
                   )
                  ((and (< 507 x 622) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 9)
                   )
                  (else
                   (ciclo_baseonline)
                   )
                  )
                )
              )
             ((and (< 355 x 682) (< 236 y 549))
              (close-graphics)
              (open-graphics)
              (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
              (((draw-pixmap-posn "base_2048.jpg") menu_2048) (make-posn 0 0) "white")
              (set! modo_juego 0)
              (let ciclo_baseonline
                ()
                (define opcionmenu_integrantes (get-mouse-click menu_2048))
                (define x (posn-x (mouse-click-posn opcionmenu_integrantes)))
                (define y (posn-y (mouse-click-posn opcionmenu_integrantes)))
                (cond
                  ((and (< 10 x 170) (< 18 y 73))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "modo_juego_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (ciclo_modo_juego)
                   )
                  ((and (< 45 x 159) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 2)
                   )
                  ((and (< 199 x 313) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 3)
                   )
                  ((and (< 353 x 467) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 4)
                   )
                  ((and (< 507 x 622) (< 259 y 371))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 5)
                   )
                  ((and (< 45 x 159) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 5)
                   )
                  ((and (< 199 x 313) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 7)
                   )
                  ((and (< 353 x 467) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 8)
                   )
                  ((and (< 507 x 622) (< 409 y 522))
                   (close-graphics)
                   (open-graphics)
                   (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
                   (((draw-pixmap-posn "esperando_conexion_2048.jpg") menu_2048) (make-posn 0 0) "white")
                   (online_mode_2048 9)
                   )
                  (else
                   (ciclo_baseonline)
                   )
                  )
                )
              )
             ((and (< 15 x 236) (< 14 y 58))
              (close-graphics)
              (open-graphics)
              (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
              (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
              (ciclo)
              )
             (else
              (ciclo_modo_juego)
              )
             )
           )
         )
       )
      ((and (< 329 x 663) (< 454 y 502))
       (newline)(display "1 vs maquina")(newline)
       (ciclo)
       )
      ((and (< 14 x 195) (< 640 y 685))
       (close-graphics)
       (open-graphics)
       (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
       (((draw-pixmap-posn "integrantes_2048.jpg") menu_2048) (make-posn 0 0) "white")
       (let ciclo_integrantes
         ()
         (define opcionmenu_integrantes (get-mouse-click menu_2048))
         (define x (posn-x (mouse-click-posn opcionmenu_integrantes)))
         (define y (posn-y (mouse-click-posn opcionmenu_integrantes)))
         (cond
           ((and (< 14 x 184) (< 10 y 51))
            (close-graphics)
            (open-graphics)
            (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
            (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
            (ciclo)
            )
           (else
            (ciclo_integrantes)
            )
           )
         )
       )
      ((and (< 206 x 296) (< 640 y 685))
       (close-graphics)
       (open-graphics)
       (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
       (((draw-pixmap-posn "comandos_2048.jpg") menu_2048) (make-posn 0 0) "white")
       (let ciclo__ayuda
         ()
         (define opcionmenu_ayuda (get-mouse-click menu_2048))
         (define x (posn-x (mouse-click-posn opcionmenu_ayuda)))
         (define y (posn-y (mouse-click-posn opcionmenu_ayuda)))
         (cond
           ((and (< 10 x 180) (< 10 y 55))
            (close-graphics)
            (open-graphics)
            (set! menu_2048 (open-viewport "2048 - Dragon Blood" 700 700))
            (((draw-pixmap-posn "menu_2048.jpg") menu_2048) (make-posn 0 0) "white")
            (ciclo)
            )
           (else
            (ciclo__ayuda)
            )
           )
         )
       )
      (else
       (ciclo)
       )
      )
    )
  )
(define thread_programaprincipal (thread menu_principal))